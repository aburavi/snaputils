// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: transfer.proto

package transfer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Transfer_PostTransferInterBank_FullMethodName        = "/transfer.Transfer/PostTransferInterBank"
	Transfer_PostTransferIntraBank_FullMethodName        = "/transfer.Transfer/PostTransferIntraBank"
	Transfer_PostTransferPaymentHostoHost_FullMethodName = "/transfer.Transfer/PostTransferPaymentHostoHost"
	Transfer_PostTransferStatus_FullMethodName           = "/transfer.Transfer/PostTransferStatus"
)

// TransferClient is the client API for Transfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface exported by the server.
type TransferClient interface {
	PostTransferInterBank(ctx context.Context, in *TransferInterBankRequest, opts ...grpc.CallOption) (*TransferInterBankResponse, error)
	PostTransferIntraBank(ctx context.Context, in *TransferIntraBankRequest, opts ...grpc.CallOption) (*TransferIntraBankResponse, error)
	PostTransferPaymentHostoHost(ctx context.Context, in *TransferPaymentHostoHostRequest, opts ...grpc.CallOption) (*TransferPaymentHostoHostResponse, error)
	PostTransferStatus(ctx context.Context, in *TransferStatusRequest, opts ...grpc.CallOption) (*TransferStatusResponse, error)
}

type transferClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferClient(cc grpc.ClientConnInterface) TransferClient {
	return &transferClient{cc}
}

func (c *transferClient) PostTransferInterBank(ctx context.Context, in *TransferInterBankRequest, opts ...grpc.CallOption) (*TransferInterBankResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferInterBankResponse)
	err := c.cc.Invoke(ctx, Transfer_PostTransferInterBank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) PostTransferIntraBank(ctx context.Context, in *TransferIntraBankRequest, opts ...grpc.CallOption) (*TransferIntraBankResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferIntraBankResponse)
	err := c.cc.Invoke(ctx, Transfer_PostTransferIntraBank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) PostTransferPaymentHostoHost(ctx context.Context, in *TransferPaymentHostoHostRequest, opts ...grpc.CallOption) (*TransferPaymentHostoHostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferPaymentHostoHostResponse)
	err := c.cc.Invoke(ctx, Transfer_PostTransferPaymentHostoHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) PostTransferStatus(ctx context.Context, in *TransferStatusRequest, opts ...grpc.CallOption) (*TransferStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferStatusResponse)
	err := c.cc.Invoke(ctx, Transfer_PostTransferStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferServer is the server API for Transfer service.
// All implementations must embed UnimplementedTransferServer
// for forward compatibility.
//
// Interface exported by the server.
type TransferServer interface {
	PostTransferInterBank(context.Context, *TransferInterBankRequest) (*TransferInterBankResponse, error)
	PostTransferIntraBank(context.Context, *TransferIntraBankRequest) (*TransferIntraBankResponse, error)
	PostTransferPaymentHostoHost(context.Context, *TransferPaymentHostoHostRequest) (*TransferPaymentHostoHostResponse, error)
	PostTransferStatus(context.Context, *TransferStatusRequest) (*TransferStatusResponse, error)
	mustEmbedUnimplementedTransferServer()
}

// UnimplementedTransferServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransferServer struct{}

func (UnimplementedTransferServer) PostTransferInterBank(context.Context, *TransferInterBankRequest) (*TransferInterBankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTransferInterBank not implemented")
}
func (UnimplementedTransferServer) PostTransferIntraBank(context.Context, *TransferIntraBankRequest) (*TransferIntraBankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTransferIntraBank not implemented")
}
func (UnimplementedTransferServer) PostTransferPaymentHostoHost(context.Context, *TransferPaymentHostoHostRequest) (*TransferPaymentHostoHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTransferPaymentHostoHost not implemented")
}
func (UnimplementedTransferServer) PostTransferStatus(context.Context, *TransferStatusRequest) (*TransferStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTransferStatus not implemented")
}
func (UnimplementedTransferServer) mustEmbedUnimplementedTransferServer() {}
func (UnimplementedTransferServer) testEmbeddedByValue()                  {}

// UnsafeTransferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferServer will
// result in compilation errors.
type UnsafeTransferServer interface {
	mustEmbedUnimplementedTransferServer()
}

func RegisterTransferServer(s grpc.ServiceRegistrar, srv TransferServer) {
	// If the following call pancis, it indicates UnimplementedTransferServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Transfer_ServiceDesc, srv)
}

func _Transfer_PostTransferInterBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferInterBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).PostTransferInterBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transfer_PostTransferInterBank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).PostTransferInterBank(ctx, req.(*TransferInterBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_PostTransferIntraBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferIntraBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).PostTransferIntraBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transfer_PostTransferIntraBank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).PostTransferIntraBank(ctx, req.(*TransferIntraBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_PostTransferPaymentHostoHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferPaymentHostoHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).PostTransferPaymentHostoHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transfer_PostTransferPaymentHostoHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).PostTransferPaymentHostoHost(ctx, req.(*TransferPaymentHostoHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_PostTransferStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).PostTransferStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transfer_PostTransferStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).PostTransferStatus(ctx, req.(*TransferStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Transfer_ServiceDesc is the grpc.ServiceDesc for Transfer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transfer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transfer.Transfer",
	HandlerType: (*TransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostTransferInterBank",
			Handler:    _Transfer_PostTransferInterBank_Handler,
		},
		{
			MethodName: "PostTransferIntraBank",
			Handler:    _Transfer_PostTransferIntraBank_Handler,
		},
		{
			MethodName: "PostTransferPaymentHostoHost",
			Handler:    _Transfer_PostTransferPaymentHostoHost_Handler,
		},
		{
			MethodName: "PostTransferStatus",
			Handler:    _Transfer_PostTransferStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transfer.proto",
}
