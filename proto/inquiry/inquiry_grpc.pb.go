// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: inquiry.proto

package inquiry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Inquiry_PostBalanceInquiry_FullMethodName         = "/inquiry.Inquiry/PostBalanceInquiry"
	Inquiry_PostExternalAccountInquiry_FullMethodName = "/inquiry.Inquiry/PostExternalAccountInquiry"
	Inquiry_PostInternalAccountInquiry_FullMethodName = "/inquiry.Inquiry/PostInternalAccountInquiry"
)

// InquiryClient is the client API for Inquiry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface exported by the server.
type InquiryClient interface {
	PostBalanceInquiry(ctx context.Context, in *BalanceInquiryRequest, opts ...grpc.CallOption) (*BalanceInquiryResponse, error)
	PostExternalAccountInquiry(ctx context.Context, in *ExternalAccountInquiryRequest, opts ...grpc.CallOption) (*ExternalAccountInquiryResponse, error)
	PostInternalAccountInquiry(ctx context.Context, in *InternalAccountInquiryRequest, opts ...grpc.CallOption) (*InternalAccountInquiryResponse, error)
}

type inquiryClient struct {
	cc grpc.ClientConnInterface
}

func NewInquiryClient(cc grpc.ClientConnInterface) InquiryClient {
	return &inquiryClient{cc}
}

func (c *inquiryClient) PostBalanceInquiry(ctx context.Context, in *BalanceInquiryRequest, opts ...grpc.CallOption) (*BalanceInquiryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceInquiryResponse)
	err := c.cc.Invoke(ctx, Inquiry_PostBalanceInquiry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inquiryClient) PostExternalAccountInquiry(ctx context.Context, in *ExternalAccountInquiryRequest, opts ...grpc.CallOption) (*ExternalAccountInquiryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExternalAccountInquiryResponse)
	err := c.cc.Invoke(ctx, Inquiry_PostExternalAccountInquiry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inquiryClient) PostInternalAccountInquiry(ctx context.Context, in *InternalAccountInquiryRequest, opts ...grpc.CallOption) (*InternalAccountInquiryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InternalAccountInquiryResponse)
	err := c.cc.Invoke(ctx, Inquiry_PostInternalAccountInquiry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InquiryServer is the server API for Inquiry service.
// All implementations must embed UnimplementedInquiryServer
// for forward compatibility.
//
// Interface exported by the server.
type InquiryServer interface {
	PostBalanceInquiry(context.Context, *BalanceInquiryRequest) (*BalanceInquiryResponse, error)
	PostExternalAccountInquiry(context.Context, *ExternalAccountInquiryRequest) (*ExternalAccountInquiryResponse, error)
	PostInternalAccountInquiry(context.Context, *InternalAccountInquiryRequest) (*InternalAccountInquiryResponse, error)
	mustEmbedUnimplementedInquiryServer()
}

// UnimplementedInquiryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInquiryServer struct{}

func (UnimplementedInquiryServer) PostBalanceInquiry(context.Context, *BalanceInquiryRequest) (*BalanceInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostBalanceInquiry not implemented")
}
func (UnimplementedInquiryServer) PostExternalAccountInquiry(context.Context, *ExternalAccountInquiryRequest) (*ExternalAccountInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostExternalAccountInquiry not implemented")
}
func (UnimplementedInquiryServer) PostInternalAccountInquiry(context.Context, *InternalAccountInquiryRequest) (*InternalAccountInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostInternalAccountInquiry not implemented")
}
func (UnimplementedInquiryServer) mustEmbedUnimplementedInquiryServer() {}
func (UnimplementedInquiryServer) testEmbeddedByValue()                 {}

// UnsafeInquiryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InquiryServer will
// result in compilation errors.
type UnsafeInquiryServer interface {
	mustEmbedUnimplementedInquiryServer()
}

func RegisterInquiryServer(s grpc.ServiceRegistrar, srv InquiryServer) {
	// If the following call pancis, it indicates UnimplementedInquiryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Inquiry_ServiceDesc, srv)
}

func _Inquiry_PostBalanceInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InquiryServer).PostBalanceInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inquiry_PostBalanceInquiry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InquiryServer).PostBalanceInquiry(ctx, req.(*BalanceInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inquiry_PostExternalAccountInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalAccountInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InquiryServer).PostExternalAccountInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inquiry_PostExternalAccountInquiry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InquiryServer).PostExternalAccountInquiry(ctx, req.(*ExternalAccountInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inquiry_PostInternalAccountInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalAccountInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InquiryServer).PostInternalAccountInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inquiry_PostInternalAccountInquiry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InquiryServer).PostInternalAccountInquiry(ctx, req.(*InternalAccountInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Inquiry_ServiceDesc is the grpc.ServiceDesc for Inquiry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Inquiry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inquiry.Inquiry",
	HandlerType: (*InquiryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostBalanceInquiry",
			Handler:    _Inquiry_PostBalanceInquiry_Handler,
		},
		{
			MethodName: "PostExternalAccountInquiry",
			Handler:    _Inquiry_PostExternalAccountInquiry_Handler,
		},
		{
			MethodName: "PostInternalAccountInquiry",
			Handler:    _Inquiry_PostInternalAccountInquiry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inquiry.proto",
}
