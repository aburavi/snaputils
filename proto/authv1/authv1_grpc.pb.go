// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: authv1.proto

package authv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthV1_GetAuthV1_FullMethodName                 = "/authv1.AuthV1/GetAuthV1"
	AuthV1_GetRefreshAuthV1_FullMethodName          = "/authv1.AuthV1/GetRefreshAuthV1"
	AuthV1_GetResourceSetAttributeV1_FullMethodName = "/authv1.AuthV1/GetResourceSetAttributeV1"
	AuthV1_GetResourceSetUriV1_FullMethodName       = "/authv1.AuthV1/GetResourceSetUriV1"
)

// AuthV1Client is the client API for AuthV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface exported by the server.
type AuthV1Client interface {
	GetAuthV1(ctx context.Context, in *AuthV1Request, opts ...grpc.CallOption) (*AuthV1Response, error)
	GetRefreshAuthV1(ctx context.Context, in *RefreshAuthV1Request, opts ...grpc.CallOption) (*RefreshAuthV1Response, error)
	GetResourceSetAttributeV1(ctx context.Context, in *ResourceSetAttributeV1Request, opts ...grpc.CallOption) (*ResourceSetAttributeV1Response, error)
	GetResourceSetUriV1(ctx context.Context, in *ResourceSetUriV1Request, opts ...grpc.CallOption) (*ResourceSetUriV1Response, error)
}

type authV1Client struct {
	cc grpc.ClientConnInterface
}

func NewAuthV1Client(cc grpc.ClientConnInterface) AuthV1Client {
	return &authV1Client{cc}
}

func (c *authV1Client) GetAuthV1(ctx context.Context, in *AuthV1Request, opts ...grpc.CallOption) (*AuthV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthV1Response)
	err := c.cc.Invoke(ctx, AuthV1_GetAuthV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) GetRefreshAuthV1(ctx context.Context, in *RefreshAuthV1Request, opts ...grpc.CallOption) (*RefreshAuthV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshAuthV1Response)
	err := c.cc.Invoke(ctx, AuthV1_GetRefreshAuthV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) GetResourceSetAttributeV1(ctx context.Context, in *ResourceSetAttributeV1Request, opts ...grpc.CallOption) (*ResourceSetAttributeV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceSetAttributeV1Response)
	err := c.cc.Invoke(ctx, AuthV1_GetResourceSetAttributeV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) GetResourceSetUriV1(ctx context.Context, in *ResourceSetUriV1Request, opts ...grpc.CallOption) (*ResourceSetUriV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceSetUriV1Response)
	err := c.cc.Invoke(ctx, AuthV1_GetResourceSetUriV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthV1Server is the server API for AuthV1 service.
// All implementations must embed UnimplementedAuthV1Server
// for forward compatibility.
//
// Interface exported by the server.
type AuthV1Server interface {
	GetAuthV1(context.Context, *AuthV1Request) (*AuthV1Response, error)
	GetRefreshAuthV1(context.Context, *RefreshAuthV1Request) (*RefreshAuthV1Response, error)
	GetResourceSetAttributeV1(context.Context, *ResourceSetAttributeV1Request) (*ResourceSetAttributeV1Response, error)
	GetResourceSetUriV1(context.Context, *ResourceSetUriV1Request) (*ResourceSetUriV1Response, error)
	mustEmbedUnimplementedAuthV1Server()
}

// UnimplementedAuthV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthV1Server struct{}

func (UnimplementedAuthV1Server) GetAuthV1(context.Context, *AuthV1Request) (*AuthV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthV1 not implemented")
}
func (UnimplementedAuthV1Server) GetRefreshAuthV1(context.Context, *RefreshAuthV1Request) (*RefreshAuthV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefreshAuthV1 not implemented")
}
func (UnimplementedAuthV1Server) GetResourceSetAttributeV1(context.Context, *ResourceSetAttributeV1Request) (*ResourceSetAttributeV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceSetAttributeV1 not implemented")
}
func (UnimplementedAuthV1Server) GetResourceSetUriV1(context.Context, *ResourceSetUriV1Request) (*ResourceSetUriV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceSetUriV1 not implemented")
}
func (UnimplementedAuthV1Server) mustEmbedUnimplementedAuthV1Server() {}
func (UnimplementedAuthV1Server) testEmbeddedByValue()                {}

// UnsafeAuthV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthV1Server will
// result in compilation errors.
type UnsafeAuthV1Server interface {
	mustEmbedUnimplementedAuthV1Server()
}

func RegisterAuthV1Server(s grpc.ServiceRegistrar, srv AuthV1Server) {
	// If the following call pancis, it indicates UnimplementedAuthV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthV1_ServiceDesc, srv)
}

func _AuthV1_GetAuthV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).GetAuthV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthV1_GetAuthV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).GetAuthV1(ctx, req.(*AuthV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_GetRefreshAuthV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshAuthV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).GetRefreshAuthV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthV1_GetRefreshAuthV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).GetRefreshAuthV1(ctx, req.(*RefreshAuthV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_GetResourceSetAttributeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceSetAttributeV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).GetResourceSetAttributeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthV1_GetResourceSetAttributeV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).GetResourceSetAttributeV1(ctx, req.(*ResourceSetAttributeV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_GetResourceSetUriV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceSetUriV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).GetResourceSetUriV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthV1_GetResourceSetUriV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).GetResourceSetUriV1(ctx, req.(*ResourceSetUriV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthV1_ServiceDesc is the grpc.ServiceDesc for AuthV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authv1.AuthV1",
	HandlerType: (*AuthV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthV1",
			Handler:    _AuthV1_GetAuthV1_Handler,
		},
		{
			MethodName: "GetRefreshAuthV1",
			Handler:    _AuthV1_GetRefreshAuthV1_Handler,
		},
		{
			MethodName: "GetResourceSetAttributeV1",
			Handler:    _AuthV1_GetResourceSetAttributeV1_Handler,
		},
		{
			MethodName: "GetResourceSetUriV1",
			Handler:    _AuthV1_GetResourceSetUriV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authv1.proto",
}
