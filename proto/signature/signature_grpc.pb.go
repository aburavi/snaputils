// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: signature.proto

package signature

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Signature_PostAuthSignature_FullMethodName = "/signature.Signature/PostAuthSignature"
	Signature_PostTrxSignature_FullMethodName  = "/signature.Signature/PostTrxSignature"
)

// SignatureClient is the client API for Signature service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface exported by the server.
type SignatureClient interface {
	PostAuthSignature(ctx context.Context, in *AuthSignatureRequest, opts ...grpc.CallOption) (*SignatureResponse, error)
	PostTrxSignature(ctx context.Context, in *TrxSignatureRequest, opts ...grpc.CallOption) (*SignatureResponse, error)
}

type signatureClient struct {
	cc grpc.ClientConnInterface
}

func NewSignatureClient(cc grpc.ClientConnInterface) SignatureClient {
	return &signatureClient{cc}
}

func (c *signatureClient) PostAuthSignature(ctx context.Context, in *AuthSignatureRequest, opts ...grpc.CallOption) (*SignatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignatureResponse)
	err := c.cc.Invoke(ctx, Signature_PostAuthSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signatureClient) PostTrxSignature(ctx context.Context, in *TrxSignatureRequest, opts ...grpc.CallOption) (*SignatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignatureResponse)
	err := c.cc.Invoke(ctx, Signature_PostTrxSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignatureServer is the server API for Signature service.
// All implementations must embed UnimplementedSignatureServer
// for forward compatibility.
//
// Interface exported by the server.
type SignatureServer interface {
	PostAuthSignature(context.Context, *AuthSignatureRequest) (*SignatureResponse, error)
	PostTrxSignature(context.Context, *TrxSignatureRequest) (*SignatureResponse, error)
	mustEmbedUnimplementedSignatureServer()
}

// UnimplementedSignatureServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSignatureServer struct{}

func (UnimplementedSignatureServer) PostAuthSignature(context.Context, *AuthSignatureRequest) (*SignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAuthSignature not implemented")
}
func (UnimplementedSignatureServer) PostTrxSignature(context.Context, *TrxSignatureRequest) (*SignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTrxSignature not implemented")
}
func (UnimplementedSignatureServer) mustEmbedUnimplementedSignatureServer() {}
func (UnimplementedSignatureServer) testEmbeddedByValue()                   {}

// UnsafeSignatureServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignatureServer will
// result in compilation errors.
type UnsafeSignatureServer interface {
	mustEmbedUnimplementedSignatureServer()
}

func RegisterSignatureServer(s grpc.ServiceRegistrar, srv SignatureServer) {
	// If the following call pancis, it indicates UnimplementedSignatureServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Signature_ServiceDesc, srv)
}

func _Signature_PostAuthSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignatureServer).PostAuthSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signature_PostAuthSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignatureServer).PostAuthSignature(ctx, req.(*AuthSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signature_PostTrxSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrxSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignatureServer).PostTrxSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signature_PostTrxSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignatureServer).PostTrxSignature(ctx, req.(*TrxSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Signature_ServiceDesc is the grpc.ServiceDesc for Signature service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Signature_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "signature.Signature",
	HandlerType: (*SignatureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostAuthSignature",
			Handler:    _Signature_PostAuthSignature_Handler,
		},
		{
			MethodName: "PostTrxSignature",
			Handler:    _Signature_PostTrxSignature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "signature.proto",
}
